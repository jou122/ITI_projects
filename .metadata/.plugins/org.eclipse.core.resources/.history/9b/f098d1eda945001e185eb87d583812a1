/*
 * This file is part of the ÂµOS++ distribution.
 *   (https://github.com/micro-os-plus)
 * Copyright (c) 2014 Liviu Ionescu.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

// ----------------------------------------------------------------------------

#include"STD_TYPES.h"
#include"BIT_MATH.h"
#include"MRCC_Int.h"
#include"MGPIO_Int.h"
#include"MNVIC_Int.h"
#include"MEXTI_Int.h"
#include"MSTK_int.h"
#include"MUSART_Int.h"

#define SWITCH 	0
#define IN1 	1
#define IN2 	2
#define EN 		3

#define TX 		9
#define RX 		10
int main(void)
{

	/* Initialize UART and GPIO */
		MRCC_vInit();
		MRCC_vEnableClock(MRCC_AHB1, GPIOAEN);
		/*Enable RCC For USART1*/
		MRCC_vEnableClock(MRCC_APB2, USART1EN); //Enable CLK Of UART1   At APB2


		MGPIO_vSetPinMode(MGPIO_PORTA, TX, MGPIO_MODE_ALTFUN);     //TX-->UART1
		MGPIO_vSetPinMode(MGPIO_PORTA, RX, MGPIO_MODE_ALTFUN);    //RX-->UART1

		MGPIO_vSetAlternativeFunction(MGPIO_PORTA, TX, MGPIO_AF7);      //TX-->UART1
		MGPIO_vSetAlternativeFunction(MGPIO_PORTA, RX, MGPIO_AF7);     //RX-->UART1

	    /* Configure button pin as input*/
		MGPIO_vSetPinMode(MGPIO_PORTA, SWITCH, MGPIO_MODE_INPUT);
		MGPIO_vSetPinInputPull(MGPIO_PORTA, SWITCH,MGPIO_PULL_UP);

	    /* Configure motor pin as output*/
		MGPIO_vSetPinMode(MGPIO_PORTA, IN1, MGPIO_MODE_OUTPUT);
		MGPIO_vSetPinOutputType(MGPIO_PORTA, IN1,MGPIO_PULL_UP);

		MGPIO_vSetPinMode(MGPIO_PORTA, IN2, MGPIO_MODE_OUTPUT);
		MGPIO_vSetPinOutputType(MGPIO_PORTA, IN2,MGPIO_PULL_UP);

		MGPIO_vSetPinMode(MGPIO_PORTA, EN, MGPIO_MODE_OUTPUT);
		MGPIO_vSetPinOutputType(MGPIO_PORTA, EN,MGPIO_PULL_UP);

		MSUART_voidInit();
		MSTK_vInit();


  while (1)
    {
    }

  return 0;
}

